#!/bin/bash

#*
# Fetch structures from the COD (or any other database) using the
# OPTIMADE [1,2] interface.
#
# The script accepts any OPTIMADE Filter expression as an argument.
#
# USAGE:
#    $0 'elements+HAS+ALL+"Mg","O"+AND+nelements=2'
#
# Refs.:
#
# 1. OPTIMADE intreface specification (2022)
#    URL: https://github.com/Materials-Consortia/OPTIMADE
#    [accessed: 2022-05-30T10:14+03:00]
#
# 2. Andersen, Casper W. et al. OPTIMADE, an API for exchanging
#    materials data (2021) Scientific Data , Vol. 8, No. 1 Springer
#    Science and Business Media LLC p. 1-10, DOI:
#    https://doi.org/10.1038/s41597-021-00974-z
#**

# DEPENDENCIES:
# this script uses 'curl' and 'jq' commands.

TMP_DIR="${TMPDIR}"

# Set COD_OPTIMADE_SLEEP_TIME to different value in your environment
# to change this default:

test -z "${OPTIMADE_QUERY_SLEEP_TIME}" && OPTIMADE_QUERY_SLEEP_TIME=10

set -ue
## set -x

FILTER="$1" # will report an error if the first argument is not defined

OPTIMADE_SRV="https://www.crystallography.net/cod/optimade/v1"
OPTIMADE_URI="${OPTIMADE_SRV}/structures"

case "$0" in
    *-cod-*)
        OPTIMADE_SRV="https://www.crystallography.net/cod/optimade/v1"
        ;;
    *-tcod-*)
        OPTIMADE_SRV="https://www.crystallography.net/tcod/optimade/v1"
        ;;
    *-aflow-*)
        OPTIMADE_SRV="http://aflow.org/API/optimade/v1"
        ;;
    *-matcloud-*)
        OPTIMADE_SRV="https://aiida.materialscloud.org/optimade-sample/optimade/v1"
        ;;
    *-nomad-*)
        OPTIMADE_SRV="http://nomad-lab.eu/prod/rae/optimade/v1"
        ;;
esac

OPTIMADE_URI="${OPTIMADE_SRV}/structures"

BASENAME="$(basename $0)"

test -z "${TMP_DIR}" && TMP_DIR="/tmp"
TMP_DIR="${TMP_DIR}/tmp-${BASENAME}-$$"
mkdir "${TMP_DIR}"

TMP_RESPONSE="${TMP_DIR}/response.json"
TMP_HEADER="${TMP_DIR}/http-header.txt"

# To make the trap portable between bash and dash, we need to trap
# "signal" 0 ("EXIT") and rely on it for the cleanup:
## trap "rm -rf '${TMP_DIR}'" 0 1 2 3 15
trap "rm -rf '${TMP_DIR}'" EXIT
trap "exit 1" HUP INT QUIT TERM

## set -x

MORE_DATA=true
CURRENT_URI="${OPTIMADE_URI}?filter=$FILTER"

while [ $MORE_DATA = true ]
do
    if [ -n "${OPTIMADE_QUERY_VERBOSE:-""}" ]
    then
        echo "$0: NOTE, querying '${CURRENT_URI}'" >&2
    fi
    
    curl -sSL -D "${TMP_HEADER}" "${CURRENT_URI}" > "${TMP_RESPONSE}"

    STATUS="$?"
    if ! [ $STATUS -eq 0 ] ||
       ! head -n 1 "${TMP_HEADER}" | grep -q '200 OK'
    then
        echo "$0: ERROR, curl could not fetch data from '${CURRENT_URI}':" >&2
        echo "$0: curl return status = '$STATUS'" >&2
        echo "$0: HTTP header:" >&2
        cat "${TMP_HEADER}" | awk '{print " ",$0}' >&2
        exit 2
    fi
    
    MORE_DATA=$(jq -r '.meta.more_data_available' "${TMP_RESPONSE}")
    CURRENT_URI=$(jq -r '.links.next' "${TMP_RESPONSE}")

    if [[ "${CURRENT_URI}" =~ '"href":' ]]
    then
        CURRENT_URI=$(jq -r '.links.next.href' "${TMP_RESPONSE}")
    fi

    if [[ "${CURRENT_URI}" = null ]]
    then
        CURRENT_URI=$(jq -r '.meta.next' "${TMP_RESPONSE}")
    fi
    
    if ! [[ "${CURRENT_URI}" =~ ^http ]]
    then
        CURRENT_URI="${OPTIMADE_SRV}${CURRENT_URI}"
    fi
    
    ## echo $0: MORE_DATA=${MORE_DATA} NEXT_URI="${CURRENT_URI}"

    cat "${TMP_RESPONSE}"

    rm -f "${TMP_RESPONSE}"
    
    sleep ${OPTIMADE_QUERY_SLEEP_TIME}
    
    ## MORE_DATA=false
done
